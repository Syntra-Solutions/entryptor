# Entryptor CI/CD Pipeline - GitHub Actions
# Build, test, and package Python application for multiple platforms

name: CI/CD Pipeline

on:
  push:
    branches: [ main, STAGING ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Test Stage - Multiple Python Versions
  test-multiple-python:
    name: Test on Multiple Python Versions (Linux)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run code quality checks
      run: |
        echo "Running code quality checks with Python ${{ matrix.python-version }}"
        ruff check .
        ruff format --check .
        mypy src/
    
    - name: Run unit tests
      run: |
        echo "Running unit tests with Python ${{ matrix.python-version }}"
        pytest tests/ -v --tb=short --disable-warnings
    
    - name: Run integration tests
      run: |
        echo "Running integration tests with Python ${{ matrix.python-version }}"
        pytest tests/test_integration.py -v --tb=short

  # Test Stage - Cross Platform
  test-cross-platform:
    name: Test Cross-Platform
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            platform: Linux
          - os: macos-latest
            platform: macOS
          - os: windows-latest
            platform: Windows
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/Library/Caches/pip
          ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ env.PYTHON_VERSION }}-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Install platform-specific dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb
        # Install Qt platform plugin for headless testing
        sudo apt-get install -y qt6-base-dev
    
    - name: Install platform-specific dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Set up headless environment for GUI tests on macOS
        export QT_QPA_PLATFORM=offscreen
        echo "QT_QPA_PLATFORM=offscreen" >> $GITHUB_ENV
        echo "macOS headless GUI setup complete"
    
    - name: Install platform-specific dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Set up headless environment for GUI tests on Windows  
        echo "QT_QPA_PLATFORM=offscreen" >> $env:GITHUB_ENV
        echo "Windows headless GUI setup complete"
    
    - name: Run tests with platform display (Linux)
      if: matrix.os == 'ubuntu-latest'
      env:
        DISPLAY: :99
        QT_QPA_PLATFORM: offscreen
        CI: true
      run: |
        echo "Running tests on ${{ matrix.platform }}"
        xvfb-run -a pytest tests/ -v --tb=short --disable-warnings
    
    - name: Run tests (macOS/Windows)
      if: matrix.os != 'ubuntu-latest'
      env:
        QT_QPA_PLATFORM: offscreen
        CI: true
      run: |
        echo "Running tests on ${{ matrix.platform }}"
        pytest tests/ -v --tb=short --disable-warnings

  # Build Stage - Artifacts for each platform
  build-artifacts:
    name: Build Application Artifacts
    needs: [test-multiple-python, test-cross-platform]
    if: success()
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            platform: Linux
            artifact-name: entryptor-linux
          - os: macos-latest
            platform: macOS
            artifact-name: entryptor-macos
          - os: windows-latest
            platform: Windows
            artifact-name: entryptor-windows
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/Library/Caches/pip
          ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ env.PYTHON_VERSION }}-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Install platform-specific dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y qt6-base-dev
    
    - name: Create application bundle
      run: |
        echo "Building Entryptor for ${{ matrix.platform }}"
        python -m PyInstaller --clean --noconfirm \
          --name "Entryptor" \
          --windowed \
          --onedir \
          --add-data "src:src" \
          src/main.py
    
    - name: Package artifacts (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        cd dist
        tar -czf ${{ matrix.artifact-name }}.tar.gz Entryptor/
    
    - name: Package artifacts (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd dist
        Compress-Archive -Path Entryptor -DestinationPath ${{ matrix.artifact-name }}.zip
    
    - name: Upload build artifacts (Linux/macOS)
      if: matrix.os != 'windows-latest'
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact-name }}
        path: dist/${{ matrix.artifact-name }}.tar.gz
        retention-days: 30
    
    - name: Upload build artifacts (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact-name }}
        path: dist/${{ matrix.artifact-name }}.zip
        retention-days: 30

  # Package Stage - Create release package
  create-release:
    name: Create Release Package
    needs: [build-artifacts]
    if: success() && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts/
    
    - name: Create release structure
      run: |
        mkdir -p release/
        echo "Entryptor Release - $(date)" > release/README.txt
        echo "Platform-specific builds:" >> release/README.txt
        echo "- Linux: entryptor-linux.tar.gz" >> release/README.txt
        echo "- macOS: entryptor-macos.tar.gz" >> release/README.txt
        echo "- Windows: entryptor-windows.zip" >> release/README.txt
        cp -r artifacts/* release/
    
    - name: Upload release package
      uses: actions/upload-artifact@v3
      with:
        name: entryptor-release-package
        path: release/
        retention-days: 90
    
    - name: Generate build summary
      run: |
        echo "## ðŸš€ Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Date**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Python Version**: ${{ env.PYTHON_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Platforms**: Linux, macOS, Windows" >> $GITHUB_STEP_SUMMARY
        echo "- **Artifacts**: $(ls -la artifacts/ | wc -l) build artifacts created" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“¦ Available Downloads" >> $GITHUB_STEP_SUMMARY
        echo "- entryptor-linux.tar.gz" >> $GITHUB_STEP_SUMMARY
        echo "- entryptor-macos.tar.gz" >> $GITHUB_STEP_SUMMARY
        echo "- entryptor-windows.zip" >> $GITHUB_STEP_SUMMARY
