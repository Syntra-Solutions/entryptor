# Entryptor CI/CD Pipeline - GitHub Actions
# Test and build Python application for macOS only

name: CI/CD Pipeline

on:
  push:
    branches: [ main, STAGING ]
  pull_request:
    branches: [ mai    - name: Verify executable creation
      run: |
        echo "=== Build Output ==="
        ls -la dist/
        echo "=== App Bundle Info ==="
        if [ -d "dist/Entryptor.app" ]; then
          echo "App bundle structure:"
          find dist/Entryptor.app -name "Entryptor" -type f | head -5
          file dist/Entryptor.app/Contents/MacOS/Entryptor 2>/dev/null || echo "Executable location varies"
        else
          echo "No .app bundle found, checking for executable"
          file dist/Entryptor 2>/dev/null || echo "Executable not found"
        fi
    
    - name: Package macOS artifacts
      run: |
        cd dist
        # Create a DMG-style zip with the .app bundle
        if [ -d "Entryptor.app" ]; then
          echo "Packaging .app bundle"
          tar -czf entryptor-macos.tar.gz Entryptor.app/
        else
          echo "Packaging executable directory"
          tar -czf entryptor-macos.tar.gz Entryptor/
        fi
        echo "Package created: $(ls -la entryptor-macos.tar.gz)"THON_VERSION: '3.11'

jobs:
  # Test Stage - Multiple Python Versions on macOS
  test-multiple-python:
    name: Test on Multiple Python Versions (macOS)
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Verify core dependencies (skip GUI for now)
      run: |
        python -c "import cryptography; print('cryptography imported successfully')"
        python -c "import pytest; print('pytest imported successfully')"
        echo "Skipping PyQt6 verification due to macOS CI compatibility issues"
    
    - name: Set up headless environment for GUI tests
      run: |
        export QT_QPA_PLATFORM=offscreen
        echo "QT_QPA_PLATFORM=offscreen" >> $GITHUB_ENV
        echo "macOS headless GUI setup complete"
    
    - name: Run code quality checks
      run: |
        echo "Running code quality checks with Python ${{ matrix.python-version }}"
        ruff check .
        ruff format --check .
        mypy src/
    
    - name: Run non-GUI unit tests
      env:
        QT_QPA_PLATFORM: offscreen
        CI: true
      run: |
        echo "Running non-GUI unit tests with Python ${{ matrix.python-version }}"
        pytest tests/test_crypto/ tests/test_utils/ -v --tb=short --disable-warnings
    
    - name: Run integration tests (skip GUI components)
      env:
        QT_QPA_PLATFORM: offscreen
        CI: true
      run: |
        echo "Running integration tests with Python ${{ matrix.python-version }}"
        pytest tests/test_integration.py -v --tb=short -k "not gui"

  # Test Stage - macOS Only
  test-macos:
    name: Test on macOS (Python 3.11)
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ env.PYTHON_VERSION }}-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Verify core dependencies (skip GUI for now)
      run: |
        python -c "import cryptography; print('cryptography imported successfully')"
        python -c "import pytest; print('pytest imported successfully')"
        echo "Skipping PyQt6 verification due to macOS CI compatibility issues"
    
    - name: Set up headless environment for GUI tests
      run: |
        export QT_QPA_PLATFORM=offscreen
        echo "QT_QPA_PLATFORM=offscreen" >> $GITHUB_ENV
        echo "macOS headless GUI setup complete"
    
    - name: Run comprehensive tests (skip GUI components)
      env:
        QT_QPA_PLATFORM: offscreen
        CI: true
      run: |
        echo "Running comprehensive tests on macOS"
        pytest tests/test_crypto/ tests/test_utils/ tests/test_integration.py -v --tb=short --disable-warnings -k "not gui"

  # Build Stage - macOS Application Only
  build-macos:
    name: Build macOS Application
    needs: [test-multiple-python, test-macos]
    if: success()
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ env.PYTHON_VERSION }}-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Create macOS application bundle
      run: |
        echo "Building Entryptor for macOS"
        python -m PyInstaller --clean --noconfirm \
          --name "Entryptor" \
          --windowed \
          --onedir \
          --add-data "src:src" \
          --hidden-import PyQt6.QtCore \
          --hidden-import PyQt6.QtGui \
          --hidden-import PyQt6.QtWidgets \
          --hidden-import cryptography \
          --osx-bundle-identifier com.syntrasoftware.entryptor \
          src/main.py
    
    - name: Create proper macOS app structure
      run: |
        echo "Creating proper .app bundle structure"
        cd dist
        # Rename to proper .app extension if not already
        if [ -d "Entryptor" ] && [ ! -d "Entryptor.app" ]; then
          mv Entryptor Entryptor.app
        fi
        
        # Verify app structure
        ls -la Entryptor.app/
        echo "App bundle created successfully"
    
    - name: Remove quarantine attributes (for local testing)
      run: |
        echo "Removing quarantine attributes from the app bundle"
        cd dist
        # Remove quarantine attribute that macOS adds to downloaded files
        xattr -cr Entryptor.app || echo "No quarantine attributes found"
        
        # List remaining attributes
        xattr -l Entryptor.app || echo "No extended attributes"
    
    - name: Verify executable creation
      run: |
        echo "=== Build Output ==="
        ls -la dist/
        echo "=== Executable Info ==="
        file dist/Entryptor || echo "Executable not found"
        echo "=== Executable Size ==="
        du -h dist/Entryptor || echo "Size check failed"
    
    - name: Package macOS artifacts
      run: |
        cd dist
        # Create a simple zip with just the executable
        zip entryptor-macos.zip Entryptor
        # Also create tar.gz for compatibility
        tar -czf entryptor-macos.tar.gz Entryptor
    
    - name: Upload macOS build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: entryptor-macos
        path: |
          dist/entryptor-macos.zip
          dist/entryptor-macos.tar.gz
        retention-days: 30
    
    - name: Generate build summary
      run: |
        echo "## ðŸš€ macOS Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Date**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Python Version**: ${{ env.PYTHON_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Platform**: macOS" >> $GITHUB_STEP_SUMMARY
        echo "- **Artifacts**: entryptor-macos.tar.gz" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“¥ How to Download & Run:" >> $GITHUB_STEP_SUMMARY
        echo "1. Download \`entryptor-macos.tar.gz\` from Artifacts below" >> $GITHUB_STEP_SUMMARY
        echo "2. Extract: \`tar -xzf entryptor-macos.tar.gz\`" >> $GITHUB_STEP_SUMMARY
        echo "3. **Fix macOS Security Warning (Choose One):**" >> $GITHUB_STEP_SUMMARY
        echo "   - **Method 1 (Recommended)**: Right-click on \`Entryptor.app\` â†’ **Open**" >> $GITHUB_STEP_SUMMARY
        echo "   - **Method 2**: Run \`xattr -cr Entryptor.app && open Entryptor.app\`" >> $GITHUB_STEP_SUMMARY
        echo "   - **Method 3**: System Preferences â†’ Security & Privacy â†’ **Open Anyway**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ”’ macOS Security Notice:" >> $GITHUB_STEP_SUMMARY
        echo "If you see **'Python.framework is damaged'**, this is normal for unsigned apps." >> $GITHUB_STEP_SUMMARY
        echo "**This is NOT a real problem!** It's macOS Gatekeeper blocking unsigned applications." >> $GITHUB_STEP_SUMMARY
        echo "**Solution**: Use Method 1 above (right-click â†’ Open) - don't double-click!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "ðŸ“– **Full Documentation**: See \`docs/MACOS_SECURITY_SETUP.md\` for detailed instructions." >> $GITHUB_STEP_SUMMARY
