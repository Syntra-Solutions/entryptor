# Entryptor CI/CD Pipeline - GitHub Actions
# Test and build Python application for macOS only

name: CI/CD Pipeline

on:
  push:
    branches: [ main, STAGING ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Test Stage - Multiple Python Versions on macOS
  test-multiple-python:
    name: Test on Multiple Python Versions (macOS)
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Set up headless environment for GUI tests
      run: |
        export QT_QPA_PLATFORM=offscreen
        echo "QT_QPA_PLATFORM=offscreen" >> $GITHUB_ENV
        echo "macOS headless GUI setup complete"
    
    - name: Run code quality checks
      run: |
        echo "Running code quality checks with Python ${{ matrix.python-version }}"
        ruff check .
        ruff format --check .
        mypy src/
    
    - name: Run unit tests
      env:
        QT_QPA_PLATFORM: offscreen
        CI: true
      run: |
        echo "Running unit tests with Python ${{ matrix.python-version }}"
        pytest tests/ -v --tb=short --disable-warnings
    
    - name: Run integration tests
      env:
        QT_QPA_PLATFORM: offscreen
        CI: true
      run: |
        echo "Running integration tests with Python ${{ matrix.python-version }}"
        pytest tests/test_integration.py -v --tb=short

  # Test Stage - macOS Only
  test-macos:
    name: Test on macOS (Python ${{ env.PYTHON_VERSION }})
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ env.PYTHON_VERSION }}-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Set up headless environment for GUI tests
      run: |
        export QT_QPA_PLATFORM=offscreen
        echo "QT_QPA_PLATFORM=offscreen" >> $GITHUB_ENV
        echo "macOS headless GUI setup complete"
    
    - name: Run tests
      env:
        QT_QPA_PLATFORM: offscreen
        CI: true
      run: |
        echo "Running comprehensive tests on macOS"
        pytest tests/ -v --tb=short --disable-warnings

  # Build Stage - macOS Application Only
  build-macos:
    name: Build macOS Application
    needs: [test-multiple-python, test-macos]
    if: success()
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ env.PYTHON_VERSION }}-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Create macOS application bundle
      run: |
        echo "Building Entryptor for macOS"
        python -m PyInstaller --clean --noconfirm \
          --name "Entryptor" \
          --windowed \
          --onedir \
          --add-data "src:src" \
          --hidden-import PyQt6.QtCore \
          --hidden-import PyQt6.QtGui \
          --hidden-import PyQt6.QtWidgets \
          --hidden-import cryptography \
          src/main.py
    
    - name: Package macOS artifacts
      run: |
        cd dist
        tar -czf entryptor-macos.tar.gz Entryptor/
    
    - name: Upload macOS build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: entryptor-macos
        path: dist/entryptor-macos.tar.gz
        retention-days: 30
    
    - name: Generate build summary
      run: |
        echo "## ðŸš€ macOS Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Date**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Python Version**: ${{ env.PYTHON_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Platform**: macOS" >> $GITHUB_STEP_SUMMARY
        echo "- **Artifact**: entryptor-macos.tar.gz" >> $GITHUB_STEP_SUMMARY
